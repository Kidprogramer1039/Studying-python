코드 출처
https://www.acmicpc.net/source/46690588

이외 정보 출처
https://velog.io/@jhdai_ly/python%EB%AA%A8%EB%93%88-main%ED%95%A8%EC%88%98-if-name-main-%EC%9D%98-%EC%9D%98%EB%AF%B8

깨달은 점
sys.stdin.read().splitlines()
파일의 끝까지 한번에 읽어오고 개행문자를 제외하여 리스트로 읽는다.
즉 명령을 한 배열에 한 번에 저장할 수 있는데다, sys 라이브러리를 이용하여 속도 감소 효과 또한 기대해 볼 수 있기에
해당 코더는 그 점을 이용해서 반복문 안에다 위 코드를 넣어버려 코드를 깔끔하게 만들었고,

해당 코드를 작성한 작성자는 추가로
명령들의 2번째 글자가 다 다르다는 점을 이용해서 코드 용량을 줄였고,
append 안에다가 조건문 표현식을 사용해서 코드 작성도 말끔하게 했다.

sys.stdout.write를 사용한 이유
메모리는 조금 더 먹지만, 속도가 빠름

if __name__ == '__main__': 사용 이유
 if __name__ == "__main__": 구문은 엔트리포인트에서 다른 모듈을 불러와서 사용할때,
 동시에 실행되면 안되는 것들을 따로 빼두기 위함입니다.
 

코드
## 랭킹에 있는 코드를 배껴서 테스트 목적으로 제출 했는데 삭제가 안됨, 제 코드가 아닙닏.
import sys


def solve():
    q = [0]*2000000
    front = rear = 0
    res = []
    for string in sys.stdin.read().splitlines()[1:]:
        t = string[1]
        if t == "u":
            q[rear] = string[5:]
            rear += 1
        elif t == "o":
            if front == rear:
                res.append('-1')
            else:
                res.append(q[front])
                front += 1
        elif t == "i":
            res.append(str(rear-front))
        elif t == "m":
            res.append('1' if front == rear else '0')
        elif t == "r":
            res.append(q[front] if front != rear else '-1')
        elif t == "a":
            res.append(q[rear-1] if front != rear else '-1')

    sys.stdout.write('\n'.join(res))


if __name__ == '__main__':
    solve()
